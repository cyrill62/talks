---
title:    How we builds our APIs
layout:   talks
noindex:  true
---

| ### KissKissBankBank
  *How we build our APIs*

  --

  ## Who am I?

  [![](/assets/images/avatar.png)](https://github.com/cyrill62)

  Cyril LEPAGNOT

  Rails dev & Devops<br/>
  Lead dev at [KissKissBankBank & Co](http://www.kisskissbankbank.com)<br/>
  Remote worker

  ---

  ## Why APIs ?

  * Interoperability.
  * Scalability.
  * Metrics.
  * Share resources.

  --

  ## Which APIs ?

  * Public:
    * Lendopolis.
    * KissKissBankBank (soon...).
  * Internal:
    * :dollar: PSP.
    * :man: Identity Management.
    * And so on...

  ---

  ## Technical choices

  * _Format:_ JSON API (http://jsonapi.org)
  * _Protocols:_ HTTPS, RESTful
  * _Backend:_ Ruby On Rails :tram: (http://rubyonrails.org)
  * _Documentation:_ Apiary (https://apiary.io)

  ---

  ## JSON API

  * JSON is simple & easy to read.
  * Robust specifications:
    * IO format
    * Relationships
    * Query parameters (Sorting, Pagination, Filtering, Fields, Inclusions)
    * Error formats & response codes
    * links (auto discovery)
    * Metadata

  --

  ### Format sample

  `Content-Type: application/vnd.api+json`

  ```json
  {
    "data": {
      "type": "articles", /*required*/
      "id": "1", /*required*/
      "attributes": {
        "title": "JSON API paints my bikeshed!",
        "length": 256
      }
    }
  }
  ```

  --

  ### Lists

  ```json
  {
    "data": [{
      "type": "articles",
      "id": "1",
      "attributes": { "title": "JSON API paints my bikeshed!" }
    }, {
      "type": "articles",
      "id": "2",
      "attributes": { "title": "Rails is Omakase" }
    }],
  }
  ```

  --

  ### Relationships

  ```json
  {
    "data": {
      "type": "articles",
      "id": "1",
      "attributes": {
        "title": "JSON API paints my bikeshed!"
      },
      "relationships": {
        "author": {
          "data": {"id": "42", "type": "people"}
        }
      }
    },
    "included": [{
      "type": "people",
      "id": "42",
      "attributes": {
        "name": "John",
        "age": 80,
        "gender": "male"
      }
    }]
  }
  ```

  --

  ### Query parameters

  ```
  GET /people?sort=age            GET /people?sort=-age
  ```

  ```
  GET /people?page[number]=1&page[size]=10
  ```

  ```
  GET /people?filter[name]=John
  ```

  ```
  GET /people?include=location
  ```

  ```
  GET /people?fields[people]=name,age
  ```

  ```
  GET /people/1?include=location&fields[location]=city,country
  ```

  ```
  GET /people?include=location&fields[location]=city,country&sort=-age&page[number]=1&page[size]=100
  ```

  --

  ## Pagination

  ```json
  {
    "meta": {
      "total-pages": 13,
      "count": 1,
    },
    "links": {
      "self": "http://example.com/articles?page[number]=3&page[size]=1",
      "first": "http://example.com/articles?page[number]=1&page[size]=1",
      "prev": "http://example.com/articles?page[number]=2&page[size]=1",
      "next": "http://example.com/articles?page[number]=4&page[size]=1",
      "last": "http://example.com/articles?page[number]=13&page[size]=1"
    },
    "data": [
      {
        "type": "articles",
        "id": "3",
        "attributes": {
          "title": "JSON API paints my bikeshed!",
          "body": "The shortest article. Ever.",
          "created": "2015-05-22T14:56:29.000Z",
          "updated": "2015-05-22T14:56:28.000Z"
        }
      }
    ]
  }
  ```

  --

  ## Errors

  ```json
  {
    "errors": [
      {
        "status": "422",
        "code": "XXXXX42",
        "source": {
          "pointer": "/data/attributes/first-name",
          "parameter": "42"
        },
        "title":  "Invalid Attribute",
        "detail": "First name must contain at least three characters.",
        "links": {
          "about": "http://documentation.api.org/errors.html"
        }
      }
    ]
  }
  ```

  ---

  ## HTTPS

  * Secure.
  * Everybody can use it.
  * Widely used.

  ---

  ## Ruby On Rails

  * Our favorite backend Framework :cupid:
  * Easy to maintain.
  * Flexible.
  * A big community.
  * Grape.
  * Trailblazer (Operation, Representer, Policy).

  --

  ## How ?

  * Input validation:
    * [JSON SCHEMA](http://json-schema.org)
    * [Forms / Contracts](http://trailblazer.to/gems/operation/1.1/contract.html)
  * [Operations](http://trailblazer.to/gems/operation/1.1/index.html):
    * API actions
    * Non API actions (console)
  * [Representers](http://trailblazer.to/gems/roar/jsonapi.html):
    * Define what to expose
    * Format to JSON API
  * Logging as JSON Cloud.

  ---

  ## Apiary

  _How we document APIs_

  * Reusable. (Blueprint format https://apiblueprint.org)
  * [Detailed Examples](http://docs.lendotestapi.apiary.io/#reference/project/project-collection/list-all-projects).
  * [Useful Console](http://docs.lendotestapi.apiary.io/#reference/project/project-collection/list-all-projects?console=1).
  * Hosted.

  ---

  ## How to test ?

  * A **sandbox** API endpoint.
  * Through Apiary.

  --

  ## The sandbox

  * Disconnected from production.
  * Similar to production.
  * Advanced Logging. (to help our testers)

  --

  ## How we made it ?

  * Splitted DB. (1 for each tester)
  * A graceful dataset. (aka 'seed')
  * A special [API action](http://docs.sandboxlendopolis.apiary.io/#reference/sandbox/sandbox/reset) to reset it.
  * Ruby on Rails + PostgreSQL = :cupid:

  ---

  # Webhooks

  * HTTPS only
  * Signed
  * Can be switched on/off
  * Retry on failure
  * Logging

  ---

  ## Happy Hacking!

  [@cyrill62](http://twitter.com/cyrill62)
